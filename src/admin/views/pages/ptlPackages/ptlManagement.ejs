<link rel="stylesheet" href="/admin/css/websiteManagement/tracking.css">
<style>
    .trackingHeadding {
        color: #252223;
    }

    .btn-close-white {
        filter: none !important;
    }

    .custom-modal {
        max-width: 70%;
    }

    .tooltip-inner {
        max-width: 350px;
        /* default is 200px */
        white-space: normal;
        /* allow wrapping */
        text-align: left;
    }
</style>
<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="fw-bold">ðŸ“¦ Ptl Package Management</h3>
        <div>
            <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#multiAssignModal">
                <i class="fas fa-plus me-2"></i>Multi Assign
            </button>

            <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#addPackageModel">
                <i class="fas fa-plus me-2"></i>Add Package
            </button>

            <button class="btn btn-success me-2" id="downloadAllTrackingCsv">
                <i class="fas fa-download me-2"></i> Download CSV
            </button>
            <!-- <button class="btn btn-pink" data-bs-toggle="modal" data-bs-target="#trackingModal">
                <i class="fas fa-plus me-2"></i> Add Tracking
            </button> -->
        </div>
    </div>

    <div class="card shadow-sm mb-4 " id="searchTrackingCard">
        <div class="card-body">
            <h5 class="mb-3">Search PTL Management</h5>
            <div class="row g-3">
                <div class="col-md-3">
                    <label for="pickUpLocation" class="form-label">Pickup Location</label>
                    <input type="text" class="form-control" id="pickUpLocation" placeholder="Enter pickUpLocation ">
                </div>

                <div class="col-md-3">
                    <label for="dropUpLocation" class="form-label">Drop Location</label>
                    <input type="text" class="form-control" id="dropUpLocation" placeholder="Enter dropUpLocation ">
                </div>
                <div class="col-md-3">
                    <label for="dropUpLocation" class="form-label">Order Id</label>
                    <input type="text" class="form-control" id="orderId" placeholder="Enter Order Id ">
                </div>

                <div class="col-md-3">
                    <label for="searchStatus" class="form-label">Status</label>
                    <select id="searchStatus" class="form-select">
                        <option value="">All</option>
                        <option value="1">Pickup</option>
                        <option value="2">In Transit</option>
                        <option value="3">Out for Delivery</option>
                        <option value="4">Delivered</option>
                        <option value="5">Cancelled</option>
                    </select>
                </div>
                <!-- <div class="col-md-3">
                    <label for="searchDate" class="form-label">Estimate Date</label>
                    <input type="date" class="form-control" id="searchDate">
                </div> -->


                <div class="col-md-3 d-flex gap-2 align-items-end">
                    <button class="btn btn-primary" id="searchBtn">Search</button>
                    <button class="btn btn-secondary" id="resetBtn">Reset</button>
                </div>
            </div>

        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-body">
            <div class="table-responsive">
                <table id="trackingTable" class="table table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>#</th>
                            <th><input type="checkbox" id="selectAllAdd"> Multi Assign</th>
                            <th>From Location</th>
                            <th>Drop Location</th>
                            <th>Order Id</th>
                            <!-- <th>User Id</th> -->
                            <th>User Name</th>
                            <th>Total Payment</th>
                            <!-- <th>Total Weight</th> -->
                            <th>Status</th>
                            <th>Estimate Date</th>
                            <th style="width:250px;">Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="multiAssignModal" tabindex="-1" aria-labelledby="modalTitle" aria-hidden="true">
    <div class="modal-dialog modal-lg custom-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Multi Assign Driver</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="multiAssignForm">
                    <!-- <input type="hidden" id="packageId">
                    <input type="hidden" id="userId"> -->

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="driver" class="form-label">Driver<strong class="text-danger">*</strong></label>
                            <select class="form-select" name="driver" id="driverlist2">

                            </select>
                        </div>
                        <div class="col-md-6 warehouse2Div">
                            <label for="warehouse" class="form-label">Warehouse <strong
                                    class="text-danger">*</strong></label>
                            <select class="form-select warehouselist2" name="warehouse" id="warehouselist2">
                                <option value="">Select Warehouse</option>
                            </select>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-pink w-100">Save</button>
                </form>

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="trackingModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="trackingModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg custom-modal">
        <div class="modal-content border-0 rounded-3">
            <div class="modal-header bg-pink text-white ">
                <h5 class="modal-title trackingHeadding" id="trackingModalLabel">Add Tracking</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <table border="1" cellpadding="10" cellspacing="0"
                    style="width: 100%; border-collapse: collapse; text-align: left; border-radius: 8px; font-family: 'Arial', sans-serif; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
                    <thead
                        style="background-color: #f1f1f1; color: #333; text-transform: uppercase; font-size: 14px; font-weight: bold;">
                        <tr>
                            <th
                                style="padding: 12px; border: 1px solid #ddd; text-align: center; background-color: #f8d7da; font-weight: bold; font-size: 16px;">
                                Field Name</th>
                            <th
                                style="padding: 12px; border: 1px solid #ddd; text-align: center; font-weight: bold; font-size: 16px;">
                                Value</th>
                            <th
                                style="padding: 12px; border: 1px solid #ddd; text-align: center; background-color: #f8d7da; font-weight: bold; font-size: 16px;">
                                Field Name</th>
                            <th
                                style="padding: 12px; border: 1px solid #ddd; text-align: center; font-weight: bold; font-size: 16px;">
                                Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr style="background-color: #fafafa;">
                            <td style="padding: 10px; border: 1px solid #ddd;">Pickup Pincode</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="pickupPincode">-</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">Drop Pincode</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="dropPincode">-</td>
                        </tr>
                        <tr style="background-color: #ffffff;">
                            <td style="padding: 10px; border: 1px solid #ddd;">Pickup Address</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="pickupAddress">-</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">Drop Address</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="dropAddress">-</td>
                        </tr>
                        <tr style="background-color: #fafafa;">
                            <td style="padding: 10px; border: 1px solid #ddd;">Pickup Latitude</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="pickupLatitude">-</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">Pickup Longitude</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="pickupLongitude">-</td>
                        </tr>
                        <tr style="background-color: #ffffff;">
                            <td style="padding: 10px; border: 1px solid #ddd;">Drop Latitude</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="dropLatitude">-</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">Drop Longitude</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="dropLongitude">-</td>
                        </tr>
                        <tr style="background-color: #fafafa;">
                            <td style="padding: 10px; border: 1px solid #ddd;">Pickup Note</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="pickupNote">-</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">Distance (km)</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="distance">-</td>
                        </tr>
                        <tr style="background-color: #ffffff;">
                            <td style="padding: 10px; border: 1px solid #ddd;">Duration</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="duration">-</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">SubTotal (â‚¹)</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="subTotal">-</td>
                        </tr>
                        <tr style="background-color: #fafafa;">
                            <td style="padding: 10px; border: 1px solid #ddd;">Shipping Cost (â‚¹)</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="shippingCost">-</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">Special Handling (â‚¹)</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="specialHandling">-</td>
                        </tr>
                        <tr style="background-color: #ffffff;">
                            <td style="padding: 10px; border: 1px solid #ddd;">GST (â‚¹)</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="gst">-</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">Total Payment (â‚¹)</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="totalPayment">-</td>
                        </tr>
                        <tr style="background-color: #fafafa;">
                            <td style="padding: 10px; border: 1px solid #ddd;">Transaction Status</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="transactionStatus">-</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">User ID</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="userId">-</td>
                        </tr>
                        <tr style="background-color: #ffffff;">
                            <td style="padding: 10px; border: 1px solid #ddd;">Pre Transaction ID</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="preTransactionId">-</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">Order ID</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="orderId">-</td>
                        </tr>
                        <tr style="background-color: #fafafa;">
                            <td style="padding: 10px; border: 1px solid #ddd;">Payment Date</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="transactionDate">-</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">Total No. of Package</td>
                            <td style="padding: 10px; border: 1px solid #ddd;" class="totalPackage"></td>
                        </tr>
                    </tbody>
                </table>

                <h2 style="margin-top: 50px;">Package Details</h2>

                <table border="1" cellpadding="10" cellspacing="0"
                    style="width: 100%; border-collapse: collapse; text-align: left;">
                    <thead style="background-color: #f2f2f2;">
                        <tr>
                            <th style="font-weight: bold;">Package Field</th>
                            <th style="font-weight: bold;">Value</th>
                            <th style="font-weight: bold;">Package Field</th>
                            <th style="font-weight: bold;">Value</th>
                        </tr>
                    </thead>
                    <tbody id="packageTable">


                    </tbody>
                </table>

                <div
                    style="    box-shadow: 0px 0px 5px 0px #0c63e3; border-radius: 10px; padding: 15px; margin-top: 15px;">
                    <h2 class="mb-3">Package Extra Detail</h2>
                    <form id="extraForm">

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="driver" class="form-label">Extra Number of Packages <strong
                                        class="text-danger">*</strong></label>
                                <input type="number" class="form-control" name="extraPackage" id="extraPackage"
                                    placeholder="Enter Extra No. Of Package" required>
                            </div>
                            <div class="col-md-6">
                                <label for="extraWeight" class="form-label">Extra Total Weight (kg) <strong
                                        class="text-danger">*</strong></label>
                                <input type="text" class="form-control" name="extraWeight" id="extraWeight"
                                    placeholder="Enter Extra Weight" required
                                    oninput="this.value = this.value.replace(/[^0-9.]/g, '')">
                            </div>
                            <div class="col-md-6">
                                <label for="extraDimension" class="form-label">Extra Dimensions (L x W x H) <strong
                                        class="text-danger">*</strong></label>
                                <input type="text" class="form-control" name="extraDimension" id="extraDimension"
                                    placeholder="Enter Extra Dimensions (L x W x H)" required
                                    oninput="validateDimension(this)">
                            </div>

                        </div>

                        <!-- <div class="row mb-3 ">
                            <div class="col-md-6 warehouseDiv d-none">
                                <label for="warehouse" class="form-label">Warehouse <strong
                                        class="text-danger">*</strong></label>
                                <select class="form-select" name="warehouse" id="warehouselist3">
                                    <option value="">Select Warehouse</option>
                                </select>
                            </div>
                        </div> -->




                        <button type="submit" class="btn btn-pink w-100">Save</button>
                    </form>
                </div>



            </div>
        </div>

    </div>
</div>

<div class="modal fade" id="assignModal" tabindex="-1" aria-labelledby="modalTitle" aria-hidden="true">
    <div class="modal-dialog modal-lg custom-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Assign Driver</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="assignForm">
                    <input type="hidden" id="packageId">
                    <input type="hidden" id="userId">

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="driver" class="form-label">Driver<strong class="text-danger">*</strong></label>
                            <select class="form-select" name="driver" id="driverlist">

                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="assignType" class="form-label">Deliver To<strong
                                    class="text-danger">*</strong></label>
                            <select class="form-select" name="assignType" id="assignType">
                                <option value="">Select Assign Type</option>
                                <option value="1">Warehouse</option>
                                <option value="2">User Location</option>
                            </select>
                        </div>

                    </div>

                    <div class="row mb-3 ">
                        <div class="col-md-6 warehouseDiv d-none">
                            <label for="warehouse" class="form-label">Warehouse <strong
                                    class="text-danger">*</strong></label>
                            <select class="form-select warehouselist2" name="warehouse" id="warehouselist">
                                <option value="">Select Warehouse</option>
                            </select>
                        </div>


                    </div>




                    <button type="submit" class="btn btn-pink w-100">Save</button>
                </form>

            </div>
            <div class="card-body">
                <h2>Order Tracking</h2>
                <div class="table-responsive">
                    <table id="orderAssignTable" class="table table-bordered table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>#</th>
                                <th>From Location</th>
                                <th>Drop Location</th>
                                <th>Driver Name</th>
                                <th>User Name</th>
                                <th>Delivery Status</th>
                                <th>Deliver To</th>
                                <th>Delivery Date</th>
                                <th style="width:250px">Update Status</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="addPackageModel" tabindex="-1" aria-labelledby="addPackageModel" aria-hidden="true">
    <div class="modal-dialog modal-lg custom-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Add Package</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addPackageForm">

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="driver" class="form-label">Pickup Latitude<strong
                                    class="text-danger">*</strong></label>
                            <input type="text" class="form-control floatInput" id="pickupLatitude" name="pickupLatitude"
                                placeholder="Enter Pickup Latitude">
                        </div>
                        <div class="col-md-6">
                            <label for="driver" class="form-label">Pickup Longitude<strong
                                    class="text-danger">*</strong></label>
                            <input type="text" class="form-control floatInput" id="pickupLongitude"
                                name="pickupLongitude" placeholder="Enter Pickup Longitude">
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="driver" class="form-label">Drop Latitude<strong
                                    class="text-danger">*</strong></label>
                            <input type="text" class="form-control floatInput" id="dropLatitude" name="dropLatitude"
                                placeholder="Enter Drop Longitude">
                        </div>
                        <div class="col-md-6">
                            <label for="driver" class="form-label">Drop Longitude<strong
                                    class="text-danger">*</strong></label>
                            <input type="text" class="form-control floatInput" id="dropLongitude" name="dropLongitude"
                                placeholder="Enter Drop Longitude">
                        </div>
                    </div>


                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="driver" class="form-label">Pickup Pincode<strong
                                    class="text-danger">*</strong></label>
                            <input type="text" class="form-control floatInput" id="pickupPincode" name="pickupPincode"
                                placeholder="Enter Pickup Pincode">
                        </div>
                        <div class="col-md-6">
                            <label for="driver" class="form-label">Drop Pincode<strong
                                    class="text-danger floatInput">*</strong></label>
                            <input type="text" class="form-control" id="dropPincode" name="dropPincode"
                                placeholder="Enter Drop Pincode">
                        </div>
                    </div>


                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="driver" class="form-label">Pickup Address<strong
                                    class="text-danger">*</strong></label>
                            <input type="text" class="form-control" id="pickupAddress" name="pickupAddress"
                                placeholder="Enter Pickup Address">
                        </div>
                        <div class="col-md-6">
                            <label for="driver" class="form-label">Drop Address<strong
                                    class="text-danger">*</strong></label>
                            <input type="text" class="form-control" id="dropAddress" name="dropAddress"
                                placeholder="Enter Drop Address">
                        </div>
                    </div>


                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="driver" class="form-label">Transport Mode<strong
                                    class="text-danger">*</strong></label>
                            <select class="form-select" id="transportMode" name="transportMode">
                                <option value="">Select Mode</option>
                                <option value="Train">Train</option>
                                <option value="Surface">Surface</option>
                                <option value="Air">Air</option>
                            </select>

                        </div>
                        <div class="col-md-6">
                            <label for="driver" class="form-label">Number For Contact</label>
                            <input type="tel" class="form-control floatInput number" id="numberForContact"
                                name="numberForContact" placeholder="Enter Number For Contact" minlength="10"
                                maxlength="10" pattern="[0-9]{10}">
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="driver" class="form-label">Pickup Note</label>
                            <input type="text" class="form-control" id="pickupNote" name="pickupNote"
                                placeholder="Enter Pickup Note">
                        </div>
                        <div class="col-md-6">
                            <label for="user" class="form-label">Select User<strong
                                    class="text-danger">*</strong></label>
                            <select class="form-select" id="userList" name="userList">
                                <option value="">Select User</option>
                            </select>
                        </div>
                    </div>


                    <h3>Package Details</h3>
                    <button type="button" id="addMore" class="btn btn-success btn-sm">+</button>
                    <button type="button" class="btn btn-danger btn-sm removePackage">Ã—</button>


                    <div id="packageContainer">
                        <!-- Default Package Group -->
                        <div class="package-group border p-3 mb-3">
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Package Name</label>
                                    <input type="text" class="form-control " name="packageName[]" id="packageName"
                                        placeholder="Enter Package Name">
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Package Type</label>
                                    <select class="form-select" id="packageType" name="packageType[]">
                                        <option value="">Select Mode</option>
                                        <option value="Train">Train</option>
                                        <option value="Surface">Surface</option>
                                        <option value="Air">Air</option>
                                    </select>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Number of Packages</label>
                                    <input type="text" class="form-control floatInput" name="numberOfPackages[]"
                                        placeholder="Enter Number of Packages">
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Total Weight</label>
                                    <input type="text" class="form-control floatInput" name="totalWeight[]"
                                        placeholder="Enter Total Weight">
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <label class="form-label">Length</label>
                                    <input type="text" class="form-control floatInput" name="length[]"
                                        placeholder="Length">
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Width</label>
                                    <input type="text" class="form-control floatInput" name="width[]"
                                        placeholder="Width">
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Height</label>
                                    <input type="text" class="form-control floatInput" name="height[]"
                                        placeholder="height">
                                </div>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-pink w-100">Save</button>
                </form>

            </div>
        </div>
    </div>
</div>



<script>

    function validateDimension(input) {
        let value = input.value.replace(/[^0-9.xX\s]/g, ''); // Remove invalid chars
        input.value = value;

        // Optionally enforce single 'x' between numbers
        const regex = /^\d+(\.\d+)?\s*x\s*\d+(\.\d+)?\s*x\s*\d+(\.\d+)?$/i;
        if (!regex.test(value) && value.length > 0) {
            input.setCustomValidity('Enter dimensions in format: L x W x H');
        } else {
            input.setCustomValidity('');
        }
    }
    function selectAll(columnClass, selectAllId) {
        $(selectAllId).on("change", function () {
            $("." + columnClass).prop("checked", this.checked);
        });
    }

    selectAll("multi-assign-checkbox", "#selectAllAdd");
    let trackingTable;
    // This ensures the script runs after the DOM is fully loaded
    $(document).ready(function () {


        // Initialize DataTable
        trackingTable = $('#trackingTable').DataTable({
            processing: true,
            serverSide: true,
            ajax: {
                url: '/ptlPackages/trackingList/',
                type: 'POST',
                data: function (d) {

                    d.trackingCode = $('#searchTrackingId').val();
                    d.pickUpLocation = $('#pickUpLocation').val();
                    d.dropAddress = $('#dropUpLocation').val(); // Corrected ID here
                    d.orderId = $('#orderId').val(); // Corrected ID here
                    d.status = $('#searchStatus').val();
                    d.date = $('#searchDate').val();
                    // console.log("Final request data:", d.pickUpLocation); // Debug log
                    // console.log("Final request data:", d.dropLocation); // Debug log
                }
            },
            columns: [
                {
                    data: null,
                    orderable: false, // Disable ordering for the index column
                    render: (data, type, row, meta) => meta.row + meta.settings?._iDisplayStart + 1
                },

                {
                    data: null,
                    orderable: false,
                    render: function (data, type, row) {
                        return '<input type="checkbox" class="multi-assign-checkbox" data-id="' + row?._id + '" data-userid="' + row.userId?._id + '">';
                    }
                },
                {
                    data: 'pickupAddress',
                    orderable: false,
                    render: function (data, type, row) {
                        if (!data) return '-'; // handle if pickupAddress is null
                        return data.length > 30 ? data.substring(0, 30) + '...' : data;
                    }
                }, // Corrected data property to 'pickUpLocation'
                {
                    data: 'dropAddress',
                    orderable: false,
                    render: function (data, type, row) {
                        if (!data) return '-'; // handle if pickupAddress is null
                        return data.length > 30 ? data.substring(0, 30) + '...' : data;
                    }
                },
                {
                    data: 'orderId',
                    orderable: false,

                },
                //{ data: 'userId._id' },
                { data: 'userId.fullName' },
                {
                    data: null, // get full row
                    orderable: false,
                    render: function (data, type, row) {
                        if (row.totalPayment == '0.00' && row.transactionStatus == 1) {
                            return `<strong class='text-success'>Cash</strong>`;
                        } else {
                            return `<strong class='text-success'>${row.totalPayment}</strong>`;
                        }
                    }
                },
                // { data : 'totalWeight'},

                {
                    data: 'orderStatus',
                    orderable: false,

                    render: function (data) {
                        // Status color mapping
                        let statusColor = '';
                        let statusText = '';

                        switch (parseInt(data)) { // Ensure data is treated as an integer for comparison
                            case 1:
                                statusColor = 'badge bg-warning'; // Pickup
                                statusText = 'Pick Up';
                                break;
                            case 2:
                                statusColor = 'badge bg-info'; // Out for Delivery
                                statusText = 'In Transit';
                                break;
                            case 3:
                                statusColor = 'badge bg-primary'; // In Progress
                                statusText = 'Out for Delivery';
                                break;
                            case 4:
                                statusColor = 'badge bg-success'; // Delivered
                                statusText = 'Delivered';
                                break;
                            case 5:
                                statusColor = 'badge bg-danger'; // Cancelled
                                statusText = 'Cancelled';
                                break;
                            default:
                                statusColor = 'badge bg-secondary'; // In Process
                                statusText = 'In Process';
                                break;
                        }

                        return `<span class="${statusColor}">${statusText}</span>`;
                    }
                },



                {
                    data: 'deliveryDate', // Assuming your server returns the combined date and time in 'deliveryDate'
                    render: function (data) {
                        return moment(data).format('YYYY-MM-DD HH:mm:ss'); // Format the date and time as needed
                    }
                },
                {
                    data: null,
                    orderable: false,
                    render: function (data, type, row) {
                        return `
                            <button class="btn btn-sm btn-primary editBtn ptlTabBtn" data-id="${row?._id}">    <i class="fas fa-eye"></i>&nbsp;View</button>
                            <button class="btn btn-sm btn-warning assignBtn ptlTabBtn" data-id="${row?._id}" data-userid="${row?.userId?._id}">    <i class="fas fa-edit"></i>&nbsp;Assign</button> `;
                    }
                }
            ]
        });

        $.ajax({
            url: '/ptlPackages/warehouseData',
            type: 'GET',
            success: function (response) {
                if (response.status) {
                    const drivers = response.drivers || []; // âœ… FIX: access the 'drivers' array
                    const dropdown = $('#driverlist2');
                    dropdown.empty(); // Clear existing options
                    dropdown.append('<option value="" selected readonly>Select Driver</option>');

                    // Append driver options
                    drivers.forEach(driver => {
                        const name = driver.personalInfo?.name || 'No Name';
                        const id = driver?._id;
                        dropdown.append(`<option value="${id}">${name}</option>`);
                    });

                    const warehouseList = response.warehouse || [];

                    const $warehouseDrop = $('.warehouselist2');
                    $warehouseDrop.empty(); // Clear existing options
                    $warehouseDrop.append('<option value="">Select Warehouse</option>');
                    console.log('RR =>', warehouseList)

                    warehouseList.forEach(item => {
                        console.log('item =>', item)
                        const name = item.Warehousename || 'No Name';
                        const id = item?._id || '';
                        $warehouseDrop.append(`<option value="${id}">${name}</option>`);
                    });

                    const users = response.users || []; // âœ… FIX: access the 'drivers' array
                    const userDropDown = $('#userList');
                    userDropDown.empty(); // Clear existing options
                    userDropDown.append('<option value="" selected readonly>Select User</option>');

                    // Append driver options
                    users.forEach(user => {
                        const name = user?.fullName || 'No Name';
                        const id = user?._id;
                        userDropDown.append(`<option value="${id}">${name}</option>`);
                    });
                }
            },
            error: function (xhr, status, error) {
                console.error("Error fetching warehouse data:", error);
            }
        });


        // Search Button
        $('#searchBtn').click(function () {
            trackingTable.ajax.reload();
        });

        $('#assignType').on('change', function () {
            const assignType = $(this).val();

            if (assignType == 1) {
                $('.warehouseDiv').removeClass('d-none').hide().slideDown(300);
            } else {
                $('.warehouseDiv').slideUp(300, function () {
                    $(this).addClass('d-none');
                });
            }
        });

        // Reset Button
        $('#resetBtn').click(function () {
            $('#searchTrackingId, #pickUpLocation, #dropUpLocation, #searchStatus, #searchDate , #orderId').val(''); // Included fromLocation and toLocation in reset
            trackingTable.ajax.reload();
        });

        // Submit Add/Edit Form
        $('#trackingForm').submit(function (e) {
            e.preventDefault();
            const formElement = document.getElementById('trackingForm'); // Corrected: Used 'trackingForm' instead of 'bannerForm'

            // Trimmed values
            const trackingCode = $('#trackingCode').val();
            const pickUpLocation = $('#pickUpLocation').val();
            const dropLocation = $('#dropLocation').val();
            const transportMode = $('#transportMode').val();
            const noOfPacking = $('#noOfPacking').val();
            const deliveryDate = $('#deliveryDate').val();
            // const deliveryTime = $('#deliveryTime').val().trim();
            const trackingStatus = $('#trackingStatus').val();

            const id = $('#packageid').val();
            const formData = new FormData(formElement);

            if (trackingStatus != 4) {
                formData.delete("pod");

            }




            const actionUrl = `/ptlPackages/editTracking/${id}`;
            // alert(id)

            $.ajax({
                url: actionUrl,
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                dataType: 'json',
                success: function (response) {
                    $('#trackingModal').modal('hide');
                    $('#trackingForm')[0].reset();
                    trackingTable.ajax.reload();
                    toastr.success('Tracking Data saved successfully!', 'Success');
                    const form = $('#trackingForm')[0];
                    form.reset(); // Reset the form every time the modal is shown
                    $('#trackingModalLabel').text('Add Tracking')
                    $('#filePreviewContainer').addClass('d-none');


                    // window.location.reload();
                },
                error: function (xhr) {
                    const errorMsg = xhr.responseJSON?.message || 'Failed to save tracking.';
                    toastr.error(errorMsg, 'Error');
                }
            });
        });

        // Edit Button
        $(document).on('click', '.editBtn', function () {
            const id = $(this).data('id');
            const statusLabels = {
                0: "Initiate",
                1: "Complete",
                2: "Pending",
                3: "Failed",
                4: "Refunded",
                5: "Partial Payment"
            };


            $.ajax({
                url: '/ptlPackages/get/' + id,
                type: 'GET',
                success: function (data) {
                    // $('#trackingId').val(data._id);
                    $('.pickupPincode').text(data.packageDetail.pickupPincode || '-');
                    $('.dropPincode').text(data.packageDetail.dropPincode); // Added pickup location
                    $('.pickupAddress').text(data.packageDetail.pickupAddress); // Added drop location
                    $('.dropAddress').text(data.packageDetail.dropAddress); // Added transport mode
                    $('.pickupLatitude').text(data.packageDetail.pickupLatitude); // Added no of packing
                    $('.pickupLongitude').text(data.packageDetail.pickupLongitude);
                    $('.dropLatitude').text(data.packageDetail.dropLatitude);
                    $('.dropLongitude').text(data.packageDetail.dropLongitude);
                    $('.pickupNote').text(data.packageDetail.pickupNote);
                    $('.subTotal').text(data.packageDetail.subTotal);
                    $('.shippingCost').text(data.packageDetail.shippingCost);
                    $('.specialHandling').text(data.packageDetail.specialHandling);
                    $('.gst').text(data.packageDetail.gst);
                    $('.totalPayment').text(data.packageDetail.totalPayment);
                    $('.distance').text(data.packageDetail.distance);
                    $('.duration').text(data.packageDetail.duration);
                    $('.transactionStatus').text(statusLabels[data.packageDetail.transactionStatus]);
                    $('.userId').text(data.packageDetail.userId);
                    $('.preTransactionId').text(data.packageDetail.preTransactionId);
                    $('.orderId').text(data.packageDetail.orderId);
                    $('.transactionDate').text(new Date(data.packageDetail.transactionDate).toLocaleString());
                    $('.totalPackage').text(data.packageDetail.packages ? data.packageDetail.packages.length : 0);
                    $('#extraPackage').val(data.packageDetail.extraPackage);
                    $('#extraWeight').val(data.packageDetail.extraWeight);
                    $('#extraDimension').val(data.packageDetail.extraDimension);

                    const packages = data.packageDetail.packages || [];
                    // console.log('ppp', packages)
                    const tbody = $('#packageTable');

                    if (packages.length > 0) {
                        packages.forEach((pkg, index) => {
                            // console.log('dddd', pkg)

                            // Add header row for the package with a bold and centered title
                            tbody.append(`
            <tr style="background-color: #e0f7fa;">
                <td colspan="4" style="font-weight: bold; text-align: center;">${pkg.packageName}</td>
            </tr>
        `);

                            // Add rows for package details
                            tbody.append(`
            <tr>
                <td style="font-weight: bold;">Package Type</td>
                <td>${pkg.packageType}</td>
                <td style="font-weight: bold;">Number of Packages</td>
                <td>${pkg.numberOfPackages}</td>
            </tr>
            <tr>
                <td style="font-weight: bold;">Total Weight (kg)</td>
                <td>${pkg.totalWeight}</td>
                <td style="font-weight: bold;">Dimensions (L x W x H)</td>
                <td>${pkg.length} x ${pkg.width} x ${pkg.height}</td>
            </tr>
        `);
                        });
                    } else {
                        // In case there are no packages, add a row with a message
                        tbody.append(`
        <tr>
            <td colspan="4" style="text-align: center; font-weight: bold; color: red;">No packages available</td>
        </tr>
    `);
                    }



                    $('#trackingModal').modal('show');
                }
            });

            $('#trackingStatus').change(function () {
                // Code to execute when the element's value changes
                console.log("The value of the element has changed!");
                let trackingVal = $(this).val();
                if (trackingVal == 4)
                    $('.pod').removeClass('d-none');
                else
                    $('.pod').addClass('d-none');

            });
        });


        $(document).on('click', '.assignBtn', function () {
            const id = $(this).data('id');
            const userId = $(this).data('userid');
            $('#userId').val(userId);
            // alert(id)
            $('#packageId').val(id);


            $.ajax({
                url: '/ptlPackages/getData/' + id,
                type: 'GET',
                dataType: 'json',
                success: async function (data) {

                    const drivers = data.drivers || []; // âœ… FIX: access the 'drivers' array
                    const dropdown = $('#driverlist');
                    dropdown.empty(); // Clear existing options
                    dropdown.append('<option value="" selected readonly>Select Driver</option>');

                    // Append driver options
                    drivers.forEach(driver => {
                        const name = driver.personalInfo?.name || 'No Name';
                        const id = driver?._id;
                        dropdown.append(`<option value="${id}">${name}</option>`);
                    });

                    const warehouse = data.warehouse || [];
                    // console.log(data.warehouse)

                    const Warehouse_drop = $('#warehouselist');

                    Warehouse_drop.empty(); // Clear existing options
                    Warehouse_drop.append('<option value="">Select Warehouse</option>');

                    await warehouse.forEach(warehouseData => {
                        const name = warehouseData.Warehousename || 'No Name';
                        const id = warehouseData?._id;
                        Warehouse_drop.append(`<option value="${id}">${name}</option>`);
                    });

                    // let driverId = data.latestAssignOrderDetail.driverId || 0;
                    // let warehouseId = data.latestAssignOrderDetail.warehouseId || 0;
                    // let status = data.latestAssignOrderDetail.status || 0;
                    // let assignType = data.latestAssignOrderDetail.assignType || 0;

                    // $('#driverlist').val(driverId);
                    // $('#warehouselist').val(warehouseId);
                    // $('#deliveryStatus').val(status);
                    // $('#assignType').val(assignType);

                    if (assignType == 1) {
                        $('.warehouseDiv').removeClass('d-none').hide().slideDown(300);
                    } else {
                        $('.warehouseDiv').slideUp(300, function () {
                            $(this).addClass('d-none');
                        });
                    }




                },
                error: function (xhr) {
                    const errorMsg = xhr.responseJSON?.message;
                    toastr.error(errorMsg, 'Error');
                }
            });

            $('#assignModal').modal('show');




        });



        $('#trackingTable').on('click', '.editBtn', function () {
            const trackingId = $(this).data('id');
            $('#trackingModalLabel').text('Edit PTL package')
            $('#trackingModal').modal('show', this); // Pass the button element for context
        });

        // Delete Button
        $(document).on('click', '.deleteBtn', function () {
            const id = $(this).data('id');
            if (confirm("Are you sure you want to delete this tracking?")) {
                $.ajax({
                    url: '/tracking/delete/' + id,
                    type: 'DELETE',
                    success: function () {
                        trackingTable.ajax.reload();
                    }
                });
            }
        });

        // Download CSV
        $('.btn-close').click(function () {
            window.location.reload();
        });

        $('#downloadAllTrackingCsv').click(function () {
            const params = new URLSearchParams({
                trackingCode: $('#searchTrackingId').val(),
                status: $('#searchStatus').val(),
                date: $('#searchDate').val()
            });
            window.location.href = '/ptlPackages/downloadCsv?' + params.toString();
        });

    });
    $(document).on('click', '#viewPackageBtn', function () {
        const packageId = $('#packageid').val().trim();
        if (packageId) {
            loadPackageDetails(packageId);
        } else {
            $('#packageDetailsTableBody').html('<tr><td colspan="3" class="text-warning text-center">Please enter a valid Package ID</td></tr>');
        }
    });

    $('#extraForm').submit(function (e) {
        e.preventDefault();

        const extraPackage = $('#extraPackage').val().trim();
        const extraWeight = $('#extraWeight').val().trim();
        const extraDimension = $('#extraDimension').val().trim();
        const packageId = $('.editBtn').data('id');

        // alert(packageId)

        // Validate fields
        if (!extraPackage) {
            toastr.error("Please Enter Extra Package", 'Error');
            return;
        }
        if (!extraWeight) {
            toastr.error("Please Enter Extra Weight", 'Error');
            return;
        }
        if (!extraDimension) {
            toastr.error("Please Enter Extra Dimension", 'Error');
            return;
        }

        // Validate dimension format: L x W x H
        const dimensionRegex = /^\d+\s*x\s*\d+\s*x\s*\d+$/i;
        if (!dimensionRegex.test(extraDimension)) {
            toastr.error("Dimension must be in L x W x H format (e.g., 10 x 20 x 30)", 'Error');
            return;
        }

        const actionUrl = `/ptlPackages/addExtraDimension`;

        $.ajax({
            url: actionUrl,
            type: 'POST',
            data: {
                extraPackage, extraWeight, extraDimension, packageId
            },
            dataType: 'json',
            success: function (response) {
                if (response.success) {
                    $('#extraForm')[0].reset();
                    toastr.success('Order Data saved successfully!', 'Success');
                    window.location.reload();

                } else {
                    toastr.error(response.message, 'Error');
                }
            },
            error: function (xhr) {
                const errorMsg = xhr.responseJSON?.message || 'Failed to save tracking.';
                toastr.error(errorMsg, 'Error');
            }
        });
    });


    $('#assignForm').submit(function (e) {
        e.preventDefault();
        const formElement = document.getElementById('assignForm'); // Corrected: Used 'trackingForm' instead of 'bannerForm'

        // Trimmed values


        // const driver = $('#driverId').val();
        const driver = $('#driverlist').val();
        const assignType = $('#assignType').val();
        // const warehouseid = $('#warehouselist').val();
        const warehouseid = document.getElementById('warehouselist').value;

        const status = $('#deliveryStatus').val();
        const packageId = $('#packageId').val();
        const userId = $('#userId').val();

        const formData = new FormData(formElement);
        formData.append('packageId', packageId)
        formData.append('userId', userId)

        if (!driver) {
            toastr.error("Please Select Driver", 'Error');
            return;
        }
        if (!assignType) {
            toastr.error("Please Select Assign Type", 'Error');
            return;

        }
        if (assignType == 1 && !warehouseid) {
            toastr.error("Please Select Warehouse", 'Error');
            return;

        }



        const actionUrl = `/ptlPackages/assignDriver`;
        // alert(id)

        $.ajax({
            url: actionUrl,
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            dataType: 'json',
            success: function (response) {
                if (response.success) {
                    $('#assignModal').modal('hide');
                    $('#assignForm')[0].reset();
                    trackingTable.ajax.reload();
                    toastr.success('Order Data saved successfully!', 'Success');
                } else {
                    toastr.error(response.message, 'Error');
                }
            },

            error: function (xhr) {
                const errorMsg = xhr.responseJSON?.message || 'Failed to save tracking.';
                toastr.error(errorMsg, 'Error');
            }
        });
    });


</script>


<script>
    // Delegate the change event for dynamically created #updateOrderStatus elements
    $(document).on('change', '#updateOrderStatus', function () {

        // Get the selected value and the associated order ID
        let orderValue = $(this).val();
        let assignOrderId = $(this).data('id');  // Ensure data-id is correctly attached to the select element

        // Make the AJAX request
        $.ajax({
            url: '/ptlPackages/updateOrderStatus/', // Your API endpoint
            type: 'POST',
            data: {
                orderStatus: Number(orderValue),       // Renamed to match your expected backend field
                assignOrderId: assignOrderId   // Include the assignOrderId for the backend to identify the order
            },
            dataType: 'json',  // Expect JSON response
            success: function (response) {
                // Reload the DataTable to reflect the updated status
                orderAssignTable.ajax.reload();
                // Display a success message
                toastr.success('Order Updated Successfully', 'Success');
            },
            error: function (xhr) {
                // Display an error message if something goes wrong
                const errorMsg = xhr.responseJSON?.message || 'Failed to update the order status';
                toastr.error(errorMsg, 'Error');
            }
        });
    });


    $(document).on('click', '.assignBtn', function () {

        // const packageId = $('#packageid').val();
        const packageId = $(this).data('id');
        // alert(packageId);
        if ($.fn.dataTable.isDataTable('#orderAssignTable')) {
            $('#orderAssignTable').DataTable().clear().destroy();
        }


        orderAssignTable = $('#orderAssignTable').DataTable({
            processing: true,
            serverSide: true,
            processData: false,
            contentType: false,
            dom: 'lrtip', // removes the default search box

            dataType: 'json',
            ajax: {
                url: '/ptlPackages/orderAssignList/',
                type: 'POST',
                data: function (d) {
                    d.packageId = packageId;
                }
            },
            drawCallback: function () {
                $('[data-bs-toggle="tooltip"]').tooltip();
            },
            columns: [
                {
                    data: null,
                    orderable: false, // Disable ordering for the index column
                    render: (data, type, row, meta) => meta.row + meta.settings?._iDisplayStart + 1
                },

                {
                    data: 'pickupAddress',
                    orderable: false,
                    render: function (data, type, row) {
                        if (!data) return '-'; // handle if pickupAddress is null
                        return data.length > 30 ? data.substring(0, 30) + '...' : data;
                    }
                }, // Corrected data property to 'pickUpLocation'
                {
                    data: 'dropAddress',
                    orderable: false,
                    render: function (data, type, row) {
                        if (!data) return '-'; // handle if pickupAddress is null
                        return data.length > 30 ? data.substring(0, 30) + '...' : data;
                    }
                },

                {
                    data: 'driverId',
                    orderable: false,
                    render: function (driverId, type, row) {
                        const driverName = driverId?.personalInfo?.name || 'In Process Driver';
                        return `<span>${driverName}</span>`;
                    }
                },
                {
                    data: 'userId.fullName',

                    orderable: false,

                },


                {
                    data: 'status',
                    orderable: false,

                    render: function (data) {
                        // Status color mapping
                        let statusColor = '';
                        let statusText = '';

                        switch (parseInt(data)) { // Ensure data is treated as an integer for comparison
                            case 1:
                                statusColor = 'badge bg-warning'; // Pickup
                                statusText = 'Pickup';
                                break;
                            case 2:
                                statusColor = 'badge bg-info'; // Out for Delivery
                                statusText = 'In Transit';
                                break;
                            case 3:
                                statusColor = 'badge bg-primary'; // In Progress
                                statusText = 'Out for Delivery';
                                break;
                            case 4:
                                statusColor = 'badge bg-success'; // Delivered
                                statusText = 'Delivered';
                                break;
                            case 5:
                                statusColor = 'badge bg-danger'; // Cancelled
                                statusText = 'Cancelled';
                                break;
                            default:
                                statusColor = 'badge bg-secondary'; // In Process
                                statusText = 'In Process';
                                break;
                        }

                        return `<span class="${statusColor}">${statusText}</span>`;
                    }
                },

                {
                    data: 'assignType',
                    orderable: false,
                    render: function (data) {
                        return data == 1 ? 'Warehouse' : 'User Location';
                    }
                },

                {
                    data: 'deliveryInfoIcon',
                    orderable: false,
                    render: function (data) {
                        return data || '-'; // use icon HTML if exists
                    }
                },

                {
                    data: 'status',  // Ensure the correct data field name from your backend
                    orderable: false,
                    render: function (status, type, row) {

                        const disabledAttr = !row.isLastRow ? 'disabled' : '';

                        return `
            <select id="updateOrderStatus" class="form-select" data-id="${row?._id}" ${disabledAttr}>
                <option value="0" ${status == 0 ? 'selected' : ''}>In Process</option>
                <option value="1" ${status == 1 ? 'selected' : ''}>Pickup</option>
                <option value="2" ${status == 2 ? 'selected' : ''}>In Transit</option>
                <option value="3" ${status == 3 ? 'selected' : ''}>Out for Delivery</option>
                <option value="4" ${status == 4 ? 'selected' : ''}>Delivered</option>
                <option value="5" ${status == 5 ? 'selected' : ''}>Cancelled</option>
            </select>
        `;
                    }
                }

            ]
        });

    });


    $('#multiAssignForm').submit(function (e) {
        e.preventDefault();

        const formElement = document.getElementById('multiAssignForm');
        const driver = $('#driverlist2').val();
        const warehouseId = $('#warehouselist2').val();
        const selectedPackages = $('.multi-assign-checkbox:checked');

        // Validation
        if (!driver) {
            toastr.error("Please Select Driver", 'Error');
            return;
        }

        if (!warehouseId) {
            toastr.error("Please Select Warehouse", 'Error');
            return;
        }

        if (selectedPackages.length === 0) {
            toastr.error("Please select at least one package", 'Error');
            return;
        }

        const actionUrl = `/ptlPackages/assignDriver`;
        let completedRequests = 0;

        selectedPackages.each(function () {
            const packageId = $(this).data('id');
            const userId = $(this).data('userid');

            const formData = new FormData(formElement);
            formData.append('packageId', packageId);
            formData.append('userId', userId);
            formData.append('warehouseid', warehouseId);
            formData.append('driver', driver);
            formData.append('assignType', 1);

            $.ajax({
                url: actionUrl,
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                dataType: 'json',
                success: function (response) {
                    if (response.success) {
                        // Success for individual item
                        // completedRequests++;
                        // if (completedRequests === selectedPackages.length) {
                        $('#multiAssignModal').modal('hide');
                        $('#multiAssignForm')[0].reset();
                        trackingTable.ajax.reload();
                        toastr.success('Packages assigned successfully!', 'Success');
                        // }
                    } else {
                        toastr.error(response.message || 'An error occurred.', 'Error');
                    }
                },
                error: function (xhr) {
                    const errorMsg = xhr.responseJSON?.message || 'Failed to assign package.';
                    toastr.error(errorMsg, 'Error');
                }
            });
        });
    });

</script>


<script>
    $('#addMore').click(function () {
        const newFields = `
             <div class="package-group border p-3 mb-3">
        <div class="d-flex justify-content-between">
            <h5>Package Details</h5>
        </div>
        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Package Name</label>
                <input type="text" class="form-control" name="packageName[]" placeholder="Enter Package Name">
            </div>
             <div class="col-md-6">
                                    <label class="form-label">Package Type</label>
                                    <select class="form-select" id="packageType" name="packageType[]">
                                        <option value="">Select Mode</option>
                                        <option value="Train">Train</option>
                                        <option value="Surface">Surface</option>
                                        <option value="Air">Air</option>
                                    </select>
                                </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Number of Packages</label>
                <input type="text" class="form-control floatInput" name="numberOfPackages[]" placeholder="Enter Number of Packages">
            </div>
            <div class="col-md-6">
                <label class="form-label">Total Weight</label>
                <input type="text" class="form-control floatInput" name="totalWeight[]" placeholder="Enter Total Weight">
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-4">
                <label class="form-label">Length</label>
                <input type="text" class="form-control floatInput" name="length[]" placeholder="Length">
            </div>
            <div class="col-md-4">
                <label class="form-label">Width</label>
                <input type="text" class="form-control floatInput" name="width[]" placeholder="Width">
            </div>
            <div class="col-md-4">
                <label class="form-label">Height</label>
                <input type="text" class="form-control floatInput" name="height[]" placeholder="Height">
            </div>
        </div>
    </div>`;

        $('#packageContainer').append(newFields);
    });

    $(document).on('click', '.removePackage', function () {
        let $groups = $('#packageContainer .package-group');
        if ($groups.length > 1) {
            $groups.last().slideUp(300, function () {
                $(this).remove();
            });
        }
    });

    $('.floatInput').on('input', function () {
        $(this).val(function (i, val) {
            return val
                .replace(/[^0-9.]/g, '')      // remove all except digits and dot
                .replace(/(\..*)\./g, '$1');  // allow only one dot
        });
    });

    $('#addPackageForm').submit(function (e) {
        e.preventDefault();

        const formElement = document.getElementById('addPackageForm');

        // Collect values
        const pickupLatitude = $('#pickupLatitude').val().trim();
        const pickupLongitude = $('#pickupLongitude').val().trim();
        const dropLatitude = $('#dropLatitude').val().trim();
        const dropLongitude = $('#dropLongitude').val().trim();
        const pickupPincode = $('#pickupPincode').val().trim();
        const dropPincode = $('#dropPincode').val().trim();
        const pickupAddress = $('#pickupAddress').val().trim();
        const dropAddress = $('#dropAddress').val().trim();

        const transportMode = $('#transportMode').val().trim();
        const pickupNote = $('#pickupNote').val().trim();
        const numberForContact = $('#numberForContact').val().trim();
        const userId = $('#userList').val().trim();

        // Basic validation
        if (!pickupLatitude) return toastr.error("Please Enter Pickup Latitude", 'Error');
        if (!pickupLongitude) return toastr.error("Please Enter Pickup Longitude", 'Error');
        if (!dropLatitude) return toastr.error("Please Enter Drop Latitude", 'Error');
        if (!dropLongitude) return toastr.error("Please Enter Drop Longitude", 'Error');
        if (!pickupPincode) return toastr.error("Please Enter Pickup Pincode", 'Error');
        if (!dropPincode) return toastr.error("Please Enter Drop Pincode", 'Error');
        if (!pickupAddress) return toastr.error("Please Enter Pickup Address", 'Error');
        if (!dropAddress) return toastr.error("Please Enter Drop Address", 'Error');

        if (!transportMode) return toastr.error("Please Enter Transport Mode", 'Error');
        if (!userId) return toastr.error("Please Select User", 'Error');

        // Collect packages
        const packageCollection = [];
        let isValid = true;

        $("#packageContainer .package-group").each(function () {
            const packageName = $(this).find('input[name="packageName[]"]').val().trim();
            const packageType = $(this).find('select[name="packageType[]"]').val();
            const numberOfPackages = $(this).find('input[name="numberOfPackages[]"]').val().trim();
            const totalWeight = $(this).find('input[name="totalWeight[]"]').val().trim();
            const length = $(this).find('input[name="length[]"]').val().trim();
            const width = $(this).find('input[name="width[]"]').val().trim();
            const height = $(this).find('input[name="height[]"]').val().trim();

            if (!packageName) {
                toastr.error("Please Enter Package Name", 'Error');
                isValid = false;
                return false;
            }

            // if (!packageType) {
            //     toastr.error("Please Select Package Type", 'Error');
            //     isValid = false;
            //     return false;
            // }
            if (!numberOfPackages || isNaN(numberOfPackages)) {
                toastr.error("Please Enter a Valid Number of Packages", 'Error');
                isValid = false;
                return false;
            }
            if (!totalWeight || isNaN(totalWeight)) {
                toastr.error("Please Enter a Valid Total Weight", 'Error');
                isValid = false;
                return false;
            }
            if (!length || isNaN(length)) {
                toastr.error("Please Enter a Valid Length", 'Error');
                isValid = false;
                return false;
            }
            if (!width || isNaN(width)) {
                toastr.error("Please Enter a Valid Width", 'Error');
                isValid = false;
                return false;
            }
            if (!height || isNaN(height)) {
                toastr.error("Please Enter a Valid Height", 'Error');
                isValid = false;
                return false;
            }

            packageCollection.push({
                packageName,
                packageType,
                numberOfPackages: parseFloat(numberOfPackages),
                totalWeight: parseFloat(totalWeight),
                length: parseFloat(length),
                width: parseFloat(width),
                height: parseFloat(height)
            });
        });

        if (packageCollection.length === 0) {
            toastr.error("Please Add At Least One Valid Package", 'Error');
            return;
        }
        if (isValid == false) {
            toastr.error("Please Fill All Details", 'Error');
            return;
        }

        const actionUrl = `/ptlPackages/addPtlPackages`;
        const requestData = {
            pickupLatitude: pickupLatitude,
            pickupLongitude: pickupLongitude,
            dropLatitude: dropLatitude,
            dropLongitude: dropLongitude,
            pickupPincode: pickupPincode,
            dropPincode: dropPincode,
            pickupAddress: pickupAddress,
            dropAddress: dropAddress,
            pickupNote: pickupNote,
            transportMode: transportMode,
            numberForContact: numberForContact,
            packages: packageCollection,
            userId: userId
        };

        $.ajax({
            url: actionUrl,
            type: 'POST',
            data: JSON.stringify(requestData),
            processData: false,
            contentType: 'application/json', // âœ… Important for JSON
            dataType: 'json',
            success: function (response) {
                if (response.success) {
                    $('#addPackageModel').modal('hide');
                    $('#addPackageForm')[0].reset();
                    window.location.reload();
                    toastr.success('Packages assigned successfully!', 'Success');
                } else {
                    toastr.error(response.message || 'An error occurred.', 'Error');
                }
            },
            error: function (xhr) {
                const errorMsg = xhr.responseJSON?.message || 'Failed to assign package.';
                toastr.error(errorMsg, 'Error');
            }
        });
    });


</script>